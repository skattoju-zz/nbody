#include <stdio.h>
#include <stdlib.h>
#include <spu_intrinsics.h>
#include <spu_mfcio.h>
#include "nbody.h"

/* util macros */
#define mfc_ea2l(ea)   (unsigned int)(ea)
#define mfc_ea2h(ea)   (unsigned int)((unsigned long long)(ea)>>32)
#define spu_writech(imm, ra) si_wrch((imm), si_from_uint(ra))

void compute_interaction(particle* i , particle* j){

	 __vector float radius, radius_sqr, s_vector, displ, accel, distSqr,
	distSixth, invDistCube, timesquared, radius_sqr0, radius_sqr1, radius_sqr2;
	
	 /*compute acceleration of particle i*/
	 radius = spu_sub(j->position,i->position);
	 radius_sqr = spu_madd(radius,radius, VECZERO);
	 radius_sqr0 = spu_splats(radius_sqr[0]);
	 radius_sqr1 = spu_splats(radius_sqr[1]);
	 radius_sqr2 = spu_splats(radius_sqr[2]);
	 distSqr = spu_add(radius_sqr0, radius_sqr1);
	 distSqr = spu_add(radius_sqr2,distSqr);
	 distSqr = spu_add(EPS2_VECTOR,distSqr);
	 distSixth = spu_madd(distSqr,distSqr,VECZERO);
	 distSixth = spu_madd(distSixth,distSqr,VEC3ZERO);
	 invDistCube = spu_rsqrte(distSixth);
	 s_vector = spu_madd(MASS_VECTOR,invDistCube,VECZERO);
	 i->acceleration = spu_madd(radius,s_vector,i->acceleration);
	
	 /*compute new position & velocity of particle i*/
	 displ = spu_madd(i->velocity,TIME_STEP_VECTOR,i->position);
	 accel = spu_madd(VECHALF,i->acceleration, VECZERO);
	 timesquared = spu_madd(TIME_STEP_VECTOR,TIME_STEP_VECTOR,VECZERO);
	 i->position = spu_madd(accel,timesquared, displ);
	 i->velocity = spu_madd(i->acceleration,TIME_STEP_VECTOR, i->velocity);

}

int main(unsigned long long speid __attribute__ ((unused)), 
	 unsigned long long argp, 
	 unsigned long long envp __attribute__ ((unused))){
  
//	printf("ea chk: %llu\n",argp);
  
	spu_args_t spu_args __attribute__ ((aligned (512)));
	unsigned int tag_id;
	
	/* Reserve a tag for application usage */
	if ((tag_id = mfc_tag_reserve()) == MFC_TAG_INVALID) {
	  printf("ERROR: unable to reserve a tag\n");
	  return 1;
	}
	//spu_mfcdma64(&spu_args, mfc_ea2h(argp), mfc_ea2l(argp), sizeof(spu_args_t), tag_id, MFC_GET_CMD);  
	mfc_get(&spu_args,argp,sizeof(spu_args),tag_id,0,0);
	spu_writech(MFC_WrTagMask, 1 << tag_id);
	spu_mfcstat(MFC_TAG_UPDATE_ALL);
	
//	printf("	SPE%d: allocating memory in local store \n",spu_args.tag);
	/* create particle system structure --> array of particles */
	particle particle_system[NO_OF_PARTICLES] __attribute__((aligned(64)));
	
	/* debug */
// 	printf("	SPE%d: spe id %d\n",spu_args.tag,spu_args.tag);
// 	printf("	SPE%d: ea full %p\n",spu_args.tag,spu_args.system);
// 	printf("	SPE%d: size of particle %lx\n",spu_args.tag,sizeof(particle));
// 	printf("	SPE%d: start_index %d\n",spu_args.tag,spu_args.start_index);
// 	printf("	SPE%d: end_index %d\n",spu_args.tag,spu_args.end_index);
	
// 	int m;
//	printf("SPE%d: dma data in \n",spu_args.tag);
// 	for(m = 0;m<10;m++){
// 	
// 	printf("	SPE%d: local store address %p\n",spu_args.tag,&particle_system[m]);
// 	printf("	SPE%d: effective_address %p\n",spu_args.tag,(particle*)spu_args.system+m);
// 
// 	/* dma stuff into the structure */
// 	  spu_mfcdma64(&particle_system[m], mfc_ea2h((particle*)spu_args.system+m), mfc_ea2l((particle*)spu_args.system+m), sizeof(particle), tag_id, MFC_GET_CMD);
// 	
// 	//printf("	SPE%d: copied %p\n",spu_args.tag,(particle*)spu_args.system+m);
// 	  
// 	}
// 	printf("SPE%d: wait for dma in \n",spu_args.tag);
// 	spu_writech(MFC_WrTagMask, 1 << tag_id);
// 	spu_mfcstat(MFC_TAG_UPDATE_ALL);
	
//	printf("SPE%d: computer interactions \n",spu_args.tag);
	/* compute */
	int i , j;
	for(i = spu_args.start_index;i=<spu_args.end_index;i++){
		for(j = 0;j<NO_OF_PARTICLES;j++){
			compute_interaction(&spu_args.particle_system[i],&spu_args.particle_system[j]);
		}
	}
	
// 	int m;
// 	printf("SPE%d: dma data out \n",spu_args.tag);	
// 	for(m = 0;m<NO_OF_PARTICLES;m++){
// 	  
// 	printf("	SPE%d: local store address %p\n",spu_args.tag,&particle_system[m]);
// 	printf("	SPE%d: effective_address %p\n",spu_args.tag,(particle*)spu_args.system+m);
// 	  
// 	  /* dma stuff out */
// 	  spu_mfcdma64(&particle_system[m], mfc_ea2h(spu_args.system+sizeof(particle)*m), mfc_ea2l(&spu_args.system+sizeof(particle)*m), sizeof(particle),tag_id, MFC_PUT_CMD);
// 	}
// 	printf("SPE%d: wait for dma out completion \n",spu_args.tag);
	
	mfc_put(&spu_args, argp, sizeof(spu_args), tag_id, 0, 0);
	spu_writech(MFC_WrTagMask, 1 << tag_id);
	spu_mfcstat(MFC_TAG_UPDATE_ALL);
	
	return 0;
}
