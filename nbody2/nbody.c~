/* COMP 426 Assignment 2
*
* This program is a rudimentary N-Body simulation that runs on the PPE & SPEs of the Cell B.E.
* 100 particles are placed randomly in four quadrants of 100 unit cube.
* Forces (Due to gravity) between them are computed and their position velocity
* and acceleration are updated at each iteration.
*
* Siddhartha Kattoju
* 9209905
*
* This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <errno.h>
#include <pthread.h>
#include <ppu_intrinsics.h>
#include <libspe2.h>
#include <altivec.h>
#include "nbody.h"

extern spe_program_handle_t nbody_spu;

/* util functions */
void debug_print_float_vector(__vector float var, char* name){

 float *vec = (float*)&var;
 printf("%s : %f %f %f %f \n", name, vec[0], vec[1], vec[2], vec[3]);

}

void debug_print_int_vector(__vector int var, char* name){

 int *vec = (int*)&var;
 printf("%s : %d %d %d %d \n", name, vec[0], vec[1], vec[2], vec[3]);

}

void init_particles(particle* system){

/*
* particles will be placed randomly 4 quadrants of 3d space
* q1: x>0, y>0
* q2: x<0, y>0
* q3: x<0, y<0
* q4: x>0, y<0
*
*/

 int i = 0;
 srand(time(NULL));

 // q1 x>0, y>0
 for(; i < NO_OF_PARTICLES/4; i++){
   system[i].position = (__vector float){rand()%INIT_BOUNDING_BOX,
rand()%INIT_BOUNDING_BOX,
(rand()%INIT_BOUNDING_BOX*2)-INIT_BOUNDING_BOX, 0};
   system[i].velocity = (__vector float){0,0,0,0};
   system[i].acceleration = (__vector float){0,0,0,0};
 }

 // q2 x<0, y>0
 for(; i < NO_OF_PARTICLES/2; i++){
   system[i].position = (__vector float){-rand()%INIT_BOUNDING_BOX,
rand()%INIT_BOUNDING_BOX,
(rand()%INIT_BOUNDING_BOX*2)-INIT_BOUNDING_BOX, 0};
   system[i].velocity = (__vector float){0,0,0,0};
   system[i].acceleration = (__vector float){0,0,0,0};

   //debug_print_float_vector(particle_system[i].position,"particle_system[i].position");

 }

 // q3 x<0, y<0
 for(; i < 3*NO_OF_PARTICLES/4; i++){

   system[i].position = (__vector float){-rand()%INIT_BOUNDING_BOX,
-rand()%INIT_BOUNDING_BOX,
(rand()%INIT_BOUNDING_BOX*2)-INIT_BOUNDING_BOX, 0};
   system[i].velocity = (__vector float){0,0,0,0};
   system[i].acceleration = (__vector float){0,0,0,0};

 }

 // q4 x>0, y<0
 for(; i < NO_OF_PARTICLES; i++){

   system[i].position = (__vector float){rand()%INIT_BOUNDING_BOX,
-rand()%INIT_BOUNDING_BOX,
(rand()%INIT_BOUNDING_BOX*2)-INIT_BOUNDING_BOX, 0};
   system[i].velocity = (__vector float){0,0,0,0};
   system[i].acceleration = (__vector float){0,0,0,0};

 }


}

void compute_interaction(particle* i , particle* j){

 __vector float radius, radius_sqr, s_vector, displ, accel, distSqr,
distSixth, invDistCube;

 /*compute acceleration of particle i*/
 radius = vec_sub(j->position,i->position);
 radius_sqr = vec_madd(radius,radius, VECZERO);
 distSqr = vec_add(vec_splat(radius_sqr,0),vec_splat(radius_sqr,1));
 distSqr = vec_add(vec_splat(radius_sqr,2),distSqr);
 distSqr = vec_add(vec_splat(radius_sqr,3),distSqr);
 distSqr = vec_add(EPS2_VECTOR,distSqr);
 distSixth = vec_madd(distSqr,distSqr,VECZERO);
 distSixth = vec_madd(distSixth,distSqr,VEC3ZERO);
 invDistCube = vec_rsqrte(distSixth);
 s_vector = vec_madd(MASS_VECTOR,invDistCube,VECZERO);
 i->acceleration = vec_madd(radius,s_vector,i->acceleration);

 /*compute new position & velocity of particle i*/
 displ = vec_madd(i->velocity,TIME_STEP_VECTOR,i->position);
 accel = vec_madd(VECHALF,i->acceleration, VECZERO);
 i->position = vec_madd(accel,TIME_SQUARED, displ);
 i->velocity = vec_madd(i->acceleration,TIME_STEP_VECTOR, i->velocity);

}

void update_particles_ppu(particle* system){

 int i, j;

 //Thread 1 ?
 for(i = 0;i<NO_OF_PARTICLES/4;i++){
   for(j = 0;j<NO_OF_PARTICLES;j++){
     compute_interaction(&system[i],&system[j]);
   }
 }

 //Thread 2 ?
 for(i = NO_OF_PARTICLES/4;i<NO_OF_PARTICLES/2;i++){
   for(j = 0;j<NO_OF_PARTICLES;j++){
     compute_interaction(&system[i],&system[j]);
   }
 }

 //Thread 3 ?
 for(i = NO_OF_PARTICLES/2;i<3*NO_OF_PARTICLES/4;i++){
   for(j = 0;j<NO_OF_PARTICLES;j++){
     compute_interaction(&system[i],&system[j]);
   }
 }

 //Thread 4 ?
 for(i = 3*NO_OF_PARTICLES/4;i<NO_OF_PARTICLES;i++){
   for(j = 0;j<NO_OF_PARTICLES;j++){
     compute_interaction(&system[i],&system[j]);
   }
 }

}

void* ppu_pthread_function(void *arg) {
  
  spu_args_t* spe_args;
  spe_stop_info_t stop_info;
  unsigned int entry = SPE_DEFAULT_ENTRY;
  
  spe_args = (spu_args_t *)arg;
  
//   printf("PPE%d: spe tag %d \n",spe_args->tag, spe_args->tag);
//   printf("PPE%d: spe ctx %p \n",spe_args->tag, (spe_context_ptr_t)spe_args->ctx);
//   printf("PPE%d: spe start %d \n",spe_args->tag, spe_args->start_index);
//   printf("PPE%d: spe end %d \n",spe_args->tag, spe_args->end_index);
//   printf("PPE%d: spe system %p \n",spe_args->tag, spe_args->system);

//  printf("PPE%d: executing spe context %p\n",spe_args->tag,(spe_context_ptr_t)spe_args->ctx);  
  if (spe_context_run((spe_context_ptr_t)spe_args->ctx, &entry, 0, &*((spu_args_t*)arg), NULL, &stop_info) < 0) {
    perror ("Failed running context");
    exit (1);
  }
  pthread_exit(NULL);
}

//distribute things to the spu's
void update_particles_spu(particle* system, int spu_count){


	  int i = 0;
	  int start = 0;
	  spu_args_t spu_args[spu_count] __attribute__ ((aligned (512)));
	  pthread_t threads[spu_count];
	  	  
	  /* Create several SPE-threads to execute 'nbody_spu'.*/
	  for(i=0; i<spu_count; i++) {
		  
	    //printf("PPE%d: creating spu context\n",i);

	    /* Create context */
	    if ((spu_args[i].ctx = spe_context_create (0, NULL)) == NULL) {
	      perror ("Failed creating context");
	      exit (1);
	    }
		
	    //printf("PPE%d: loading spu image\n",i);

	    /* Load program into context */
	    if (spe_program_load ((spe_context_ptr_t)spu_args[i].ctx, &nbody_spu)) {
	      perror ("Failed loading program");
	      exit (1);
	    }
	    
	    //printf("PPE%d: loading params\n",i);
	    
	    /* update params to pass to the spe */
	    spu_args[i].system = system;
	    spu_args[i].start_index = start;
	    spu_args[i].end_index = start + NO_OF_PARTICLES/spu_count-1;
	    spu_args[i].tag = i;
	    
	    /* copy current system state*/
	    int k = 0;
	    for(;k<NO_OF_PARTICLES;k++)
	    spu_args[i].particle_system[k] = system[k];
	    
	    /* update start & end for next iteration*/
	    start = spu_args[i].end_index+1;

	    //printf("PPE%d: creating threads\n",i);
	    
	    /* Create thread for each SPE context */
	    if (pthread_create(&threads[i], NULL, &ppu_pthread_function, &spu_args[i]))  {
	      perror ("Failed creating thread");
	      exit (1);
	    }
	  }

	  /* Wait for SPU-thread to complete execution.  */
	  for (i=0; i<spu_count; i++) {
		
	    //printf("PPE%d: joining threads\n",i);
		  
	    if (pthread_join (threads[i], NULL)) {
	      perror("Failed pthread_join");
	      exit (1);
	    }

	    /* Destroy context */
	    if (spe_context_destroy ((spe_context_ptr_t)spu_args[i].ctx) != 0) {
	      perror("Failed destroying context");
	      exit (1);
	    }
	    
	    /* update main memory */
	    int k;
	    for(k = spu_args[i].start_index;k<=spu_args[i].end_index;k++)
	      system[k] = spu_args[i].particle_system[k];
	  }
	  
	  //printf("\nThe spu distribute has successfully executed.\n");
}

//run this on the ppe
__vector int get_quadrant_count(particle* system){
 
	 /* reset count */
	  __vector int quad_count = VECINTZERO;
	  __vector int quad_mask = VECINTZERO;
	 int i;
	 for(i = 0; i < NO_OF_PARTICLES ; i++){
	
		 __vector int top2 = (__vector int){1,1,0,0};
	     __vector int bottom2 = (__vector int){0,0,1,1};
	     __vector int left2 = (__vector int){0,1,0,1};
	     __vector int right2 = (__vector int){1,0,1,0};
	     __vector int mask1, mask2;
	   
	     __vector float vx = vec_splat(system[i].position,0);
	     __vector float vy = vec_splat(system[i].position,1);
	
		mask1 = vec_sel(right2, left2, vec_cmpgt(vx,VECZERO));
		//debug_print_int_vector(mask1,"mask1");
		mask2 = vec_sel(top2, bottom2, vec_cmpgt(vy,VECZERO));
		//debug_print_int_vector(mask2,"mask2");
		quad_mask = vec_and(mask1,mask2);
		//debug_print_int_vector(quad_mask,"quad_mask");
		quad_count = vec_add(quad_count,quad_mask);
		//debug_print_int_vector(quad_count,"quad_count");
	
	 }
	 return quad_count;
}

void render(particle* system){

 int i = 0;
 for(; i < NO_OF_PARTICLES; i++){

   float *pos = (float*) &system[i].position;
   float *vel = (float*) &system[i].velocity;
   float *acc = (float*) &system[i].acceleration;

   printf("position : %f %f %f ", pos[0], pos[1], pos[2]);
   printf("velocity : %f %f %f ", vel[0], vel[1], vel[2]);
   printf("acceleration : %f %f %f \n", acc[0], acc[1], acc[2]);

 }
}

int main (int argc, char** argv)
{
  int spu_count = SPU_THREADS;
  if(argc > 1)
    spu_count = atoi(argv[1]);
  
 /* create particle system --> array of particles */
 particle particle_system[NO_OF_PARTICLES] __attribute__((aligned(64)));
 
 /* vector that tracks the no. of particles in each quadrant */
 __vector int quad_count;
 int * qc;
 
 /* place particles in 4 quadrants */
 init_particles(particle_system);

    /*debug address map*/
//  int k = 0;
//  for(;k<NO_OF_PARTICLES;k++)
//  printf("consecutive address %d : %p \n",k,(void*)&particle_system[k]);
//  printf("consecutive address 2 : %p \n",(void*)&particle_system[1]);
//  printf("consecutive address 3 : %p \n",(void*)&particle_system[2]);
//  printf("consecutive address 4 : %p \n",(void*)&particle_system[3]);
//  printf("consecutive address 5 : %p \n",(void*)&particle_system[4]);

 
 /* run simulation */
 float simulationTime = 0.0;
 int iterations = COMPUTE_ITERATIONS;
 
 printf("----------------------------------------------");
 printf("----------------------------------------------\n");
 printf("Running simulation with %d particles using %d SPEs & %d iterations with %f seconds time steps\n",
NO_OF_PARTICLES, spu_count, COMPUTE_ITERATIONS, TIME_STEP);
 printf("----------------------------------------------");
 printf("----------------------------------------------\n");

clock_t startTime = clock();

 while(iterations > 0){

   /* Compute */
   update_particles_spu(particle_system, spu_count);

   /* Display */
   render(particle_system);

   /* Update Time */
   simulationTime = simulationTime + TIME_STEP;
   printf("----------------------------------");
   printf("Simulation Time: %f |",simulationTime);
   quad_count = get_quadrant_count(particle_system);
   qc = (int*)&quad_count;
   printf(" q1:%d q2:%d q3:%d q4:%d",qc[0], qc[1], qc[2], qc[3]);
   printf("----------------------------------\n");

   iterations --;
 }

 printf("----------------------------------------------");
 printf("----------------------------------------------\n");
 printf("Running simulation with %d particles using %d SPEs & %d iterations with %f seconds time steps\n",
NO_OF_PARTICLES, spu_count, COMPUTE_ITERATIONS, TIME_STEP);
 printf("execution time : %f seconds\n", (double)(clock() - startTime) / (double)CLOCKS_PER_SEC);
 printf("----------------------------------------------");
 printf("----------------------------------------------\n");

 return 0;
}
